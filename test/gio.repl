
= IO
== Codepoint
=== File
from gio.CodepointIterators import File
it = File('test/gio.gv')
for cp in it:
    print(cp)
    print(type(cp))

=== StringLine
from gio.CodepointIterators import StringLine
it = StringLine('val quip = 19')
for cp in it:
    print(cp)
    print(chr(cp))
    print(type(cp))

  
== Tracking
from gio.CodepointIterators import File
from gio.TrackingIterator import TrackingIterator
it = File('test/gio.gv')
it = TrackingIterator(it)
for cp in it:
    print("[{},{}] '{}'".format(it.lineCount, it.lineOffset, chr(cp)))


== TokenIterator Raw
from gio.CodepointIterators import File
from gio.TrackingIterator import TrackingIterator
from gio.TokenIterator import TokenIterator
from Tokens import tokenToString
from reporters.ConsoleStreamReporter import ConsoleStreamReporter

srcPath = 'test/tokens.gv'
it = File(srcPath)
it = TrackingIterator(it)
r = ConsoleStreamReporter()
it = TokenIterator(it, r, srcPath)
for tok in it:
    print("[{},{}] '{}': '{}'".format(
    it.lineCount,
    it.lineOffset,
    tokenToString[tok], it.textOf()
    ))


== Source
from gio.Source import FileSource
src = FileSource('test/tokens.gv')
src.srcPath
src.lineByIndex(0)
src.lineByIndex(7)

== Tokeniterator via Source
=== File
from gio.Source import FileSource
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from Tokens import tokenToString
r = ConsoleStreamReporter()
src = FileSource('test/tokens.gv')
src.srcPath
it = src.tokenIterator(r)
for tok in it:
    print("[{},{}] '{}': '{}'".format(
    it.lineCount,
    it.lineOffset,
    tokenToString[tok], it.textOf()
    ))
    
=== StringLine
from gio.Source import StringLineSource
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from Tokens import tokenToString
r = ConsoleStreamReporter()
src = StringLineSource('val quip = 19')
it = src.tokenIterator(r)
for tok in it:
    print("[{},{}] '{}': '{}'".format(
    it.lineCount,
    it.lineOffset,
    tokenToString[tok], it.textOf()
    ))
    
