
= IO

== Codepoint
=== File
from gio.CodepointIterators import FileIterator
it = FileIterator('test/gio.gv')
for cp in it:
    print(cp)
    print(type(cp))

=== StringLine
from gio.CodepointIterators import StringIterator
it = StringIterator('val quip = 19')
for cp in it:
    print(cp)
    print(chr(cp))
    print(type(cp))

=== Strings
from gio.CodepointIterators import StringsIterator
it = StringsIterator(['val quip = 19', ' x = quip + beer', 'r = b[]' ])
for cp in it:
    print(cp)
    print(chr(cp))
    print(type(cp))
  
== Tracking
from gio.CodepointIterators import FileIterator
from gio.TrackingIterator import TrackingIterator
it = FileIterator('test/gio.gv')
it = TrackingIterator(it)
for cp in it:
    print("[{},{}] '{}'".format(it.lineCount, it.lineOffset, chr(cp)))


== TokenIterator Raw
from gio.Sources import FileSource
from gio.CodepointIterators import FileIterator
from gio.TrackingIterator import TrackingIterator
from gio.TokenIterator import TokenIterator
from Tokens import tokenToString
from reporters.ConsoleStreamReporter import ConsoleStreamReporter

srcPath = 'test/tokens.gv'
src = FileSource(srcPath)
it = FileIterator(srcPath)
it = TrackingIterator(it)
r = ConsoleStreamReporter()
it = TokenIterator(it, r, src)
for tok in it:
    print("[{},{}] '{}': '{}'".format(
    it.lineCount,
    it.lineOffset,
    tokenToString[tok], it.textOf()
    ))

== Tokeniterator fail
from gio.Sources import FileSource
from gio.CodepointIterators import FileIterator
from gio.TrackingIterator import TrackingIterator
from gio.TokenIterator import TokenIterator
from Tokens import tokenToString
from reporters.ConsoleStreamReporter import ConsoleStreamReporter

srcPath = 'test/tokens_bad.gv'
src = FileSource(srcPath)
it = FileIterator(src.srcPath)
it = TrackingIterator(it)
r = ConsoleStreamReporter()

it = TokenIterator(it, r, src)
for tok in it:
    print("[{},{}] '{}': '{}'".format(
    it.lineCount,
    it.lineOffset,
    tokenToString[tok], it.textOf()
    ))
    
    

== Tokeniterator via TokenIterator Factory
=== File
from gio.Sources import FileSource
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from gio.TokenIterator import mkTokenIterator
from Tokens import tokenToString
r = ConsoleStreamReporter()
#src = FileSource('test/tokens.gv')
src = FileSource('test/syntax.gv')
it = mkTokenIterator(src, r)
for tok in it:
    print("[{},{}] '{}': '{}'".format(
    it.lineCount,
    it.lineOffset,
    tokenToString[tok], it.textOf()
    ))
    
=== String
from gio.Sources import StringSource
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from gio.TokenIterator import mkTokenIterator
from Tokens import tokenToString
r = ConsoleStreamReporter()
src = StringSource('val quip = 19')
it = mkTokenIterator(src, r)
for tok in it:
    print("[{},{}] '{}': '{}'".format(
    it.lineCount,
    it.lineOffset,
    tokenToString[tok], it.textOf()
    ))
    

=== Strings
from gio.Sources import StringsSource
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from gio.TokenIterator import mkTokenIterator
from Tokens import tokenToString
r = ConsoleStreamReporter()
src = StringsSource(['val quip = 19', 'val audience = 3', 'r = quip + audience'])
it = mkTokenIterator(src, r)
for tok in it:
    print("[{},{}] '{}': '{}'".format(
    it.lineCount,
    it.lineOffset,
    tokenToString[tok], it.textOf()
    ))
