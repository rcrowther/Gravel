python3

== Tokens
from Tokens import *
tokenToString
punctuationCodepoints

for k, v in punctuationCodepointToToken.items():
  print(k, tokenToString[v])

WHILE
INT_NUM

tokenToString[LSQUARE]

== Mark
from Mark import *
m = Mark('class')
m.toString()
NoMark.toString()

== MarkTable
from MarkTable import *
t = ExpressionMarkTable()
t.note('xbox')
# return the Mark
print(t.define('xbox'))
# return None
print(t.define('xbox'))
print(t.note('xbox1'))
t('xbox')
t.toString()



== Kinds
from Kinds import *
Any
AnyVal
AnyRef
Integer
Float
String
List(Integer)
Seq(Float) 
Iterable(AnyVal)

t = Integer
t.narrow(AnyVal)

l = List(Integer)
l.narrow(AnyVal)

=== MPTT
from KindTrees import MPTT, Node
t1 = Node()
t = MPTT(t1)
t2 = t.insert(t1, Node())
t3 = t.insert(t1, Node())
t4 = t.insert(t2, Node())
t5 = t.insert(t2, Node())
t
# = 1,2,4
t.parents(t4)
# 4,5
t.children(t2)
# True
t.isChild(t1, t5)
t.isParent(t4, t3)
# False
t.isChild(t2, t3)
t.isParent(t4, t3)

== KindNameTree
from KindTrees import KindNameTree
t = KindNameTree()


== Trees
from trees.Trees import *
from Position import NoPosition
mkSingleLineComment(NoPosition, 'No comment on single line comments')
mkMultiLineComment(NoPosition, 'Multiline comments?\nEasy')
mkParameterDefinition(NoPosition, 'xbox')
mkIntegerNamelessData(NoPosition, 44)
mkFloatNamelessData(NoPosition, 78.6)
mkStringNamelessData(NoPosition, 'doopy')
mkContextDefine(NoPosition, 'doopy')
mkContextCall(NoPosition, 'dpong')
mkMonoOpExpressionCall(NoPosition, 'dponth')
mkNamelessFunc(NoPosition)
