= Usage

== Base Syntax
All instructions in Rubble is are functions (not a ''lambda' or ''proc'). All functions have brackets. In the current compiler, functions are one per line,

?rubble
# function name ~ '(' ~ arguments ~')'
dec()
?

All functions take a fixed number of arguments.


=== How Rubble handles blocks in code sequences
There are no brackets for structuring function sequences. Blocking in code is stated explicitly, 
?rubble
frame()
    ...
frameEnd()
?
This is similar to a Ruby ""do..end" block, or Ada's ""func FuncName..endFuncName".

=== Whitespace and layout
In the current compiler, Rubble functions must be one per line. Other whitespace is irrelevant, so code can be spaced how you wish. I lean towards Python-style indenting,
?rubble
func(name: type)
    ...
    endFunc()
? 
but whitespace sizing is irrelevant.


=== Arguments
Every function can have arguments. These are bone-simple. 
??
134 = number
5.4 = float (because there's a period. Also 2.0)
""goof" = a string. note the double opening quotes
'doof' = also a string
?
Types default to the machine base. See later

Other syntax allowed. Some functions want an argument as a list. A list is formed with ''(' and '')',
?rbl
registersProtect(('rax', 'rbx'))
?
and ''aggregates' (sequences) of literals, are formed with ''[' and '']',
?rbl
set(@var1, [9 7 9])
?
For information and usage of both of these, see later.


==== An arg can not be another function
Rubble is not a LISP. This will give an error,
?rbl
whileStart(dec(reg1))
?

There are two exceptions (except they are compiler kinds). Declarations of data types and Boolean logic. See the relevant sections.


=== Commas
Rubble ignores commas. In the current compiler, commas are allowed between arguments,
??
sub(reg1, 30)
?
But nowhere else.



=== Comments
To put single-line comments into the code, use ''#',
?rbl
# I wanted to say...
?

Start multi-line comments with ''##', end with ''#',
?rbl
## This can start here...
and go on...
and on...
and on...
and on.
#
?

To put a comment into generated code,
?rbl
comment('See? I said it!')
?


== Printing
??
print( [strOrVarAny()])
println( [strOrVarAny()])
?
e.g.

?rbl
ROStringDefine(@ro1 ""In a Silent Way")
...
print('print tests')
print(ro1)
println(ro1)
?


Done.

???Move down
== The two exceptions, functions in functions
We cover these in more depth when they are used,

=== Boolean Logic
Some functions accept Boolean logic, and this can be nested,
?rbl
ifStart( and(lt(3 reg1) lt(4 5)) )
?

== Typing
Many functions accept a type as an argument.

=== Rubbles types
The types are a small fixed set. They can be embedded. They look like this,
??
Bit8

ASCIIString

Array(Bit8, 4)
?


=== Type in Rubble is not for type-checking
You need to get past this. Rubble has types to reduce the syntax to a minimum. We can cover a lot of instructions by saying, ""This is an ''add' operation with type Bit64." Or Bit32, whatever.

In the high-level sense, the current compile does not check types at all. Even if a compiler or linter is produced that checks types, it will never stop you from re-declaring or casting types.


=== There is no way to add to the collection of types
In other languages, a ''class' definition will become a type. Rubble has no such notions.



== Vsriables
Rubble has some notion of ''variables'. The idea of variables is not a full abstraction. What happens is that you declare a variable, and the name is attached to some kind of storage. Sometimes a Rubble variable can loose track of the storage, and sometimes storage can be used without a variable. That's why Rubble's variables are not a full mathematic representation. But the idea works a lot of the time.

=== Creating a variable
To make a variable you use various setting and definition functions. What really happenins is that data is returned from a function is stored for later use. This data is associated with a label. 
??
stringRODefine(@ro1 ""In a Silent Way")
?
Note the ''@' symbol. It says, ""Here is some text that will be used as a label for the data next time I use it". like this, 
??
stringRODefine(@ro1 ""In a Silent Way")
println(StrASCII ro1)
?
''@' is an error in any other locaation.


=== Allocation and definition are often seperate
In most languages, allocation and deffinition are the same,

?ruby
ro1 = "In a Silent Way"
?

In Rubble, variables are either created by one-off definiton functions,
?rbl
?
or allocation and the ability to set data on an allocated space,
?rubble
stackAlloc(@str1 ASCII 15)
set(str1 "In a Silent Way")
?
Allocation/setting is used much more than in other languages. Also, you will find that, depending on the kind of storage that you wish to use, only one way is possible. 




=== Retrieval


== Functions by group
General info on different groups of functions.

Rubble may not be a clever thing, but it has weird moments. If you are an expert, please glance over this. Non-experts people will have no problems.


=== Arithmetic

=== Boolean 

==== cmp
Put a boolean into a variable,
?rl
cmp(reg1, booleanCondition)
?
In Assembly, thats a painful job. In Rubble, it's bad Assembly.

=== switches

=== loops
