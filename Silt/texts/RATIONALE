= Rationale

== Overall Rationale
Rubble draws common assembly idoms together.

Rubble has some sub-aims. To be,
++
- an easy parse
- cross-platform
- reduced syntax
+
Where there is conflict, sub-aims do not override the main aim.

An easy parse, because languages have for too long leaned on complex input code to resolve ''what I would like to say' without thinking through the issues (several languages have syntax ambiguities that make creating tools difficult).

Cross-platform because assembly code is not.

A reduced syntax both for academic purpose of generating useful abstracctions, and for potential machine generation of code (use of Rubble as an intermediate language)


== Layout
Rubble functions must be one per line. Other languages grapple with syntax for multiline strings, and spacious parameter layout, but that's not necessary in Rubble. At the expense of these conveniences, line-based code is easier to read, parse, and gives better error messages. 

=== Commas
People like to type commas, and many other languages use commas. Rubble is assumed to be a languge which will be used at the same time as other languages, so commas are allowed. Commas may also improve readability.



== Rubble functions
Functions use what is often called Algol-like layout. That is, the symbol is outside the brackets. Rubble would by base policy use LISP-like inside-bracket placement for function symbols. But the line-layout, and simplistic syntax, mean Rubble can unabiguously use Algol placement. This is much easier to read.

=== Arguments
Rubble's arguments are always of fixed size. Actually, vargs are possible by passing in arrays. This is nowhere near the readablity of high-level languages and their elipses. But, again, it is easy to parse, and at Rubble's level of coding, appropriate.

=== Functions only
Other languages use parsers and alternate syntxes to make symbol allocation readable. Infixed operators like ''=' would allow the usual cute, high-level, mathematical,

?ruby
ro1 = "In a Silent Way"
?

But Rubble is deliberately low in syntax, so doesn't implement infixed operators. It reuses the function syntax, in a vaguely LISP-like way,
?ruby
def ROData(rp1 "In a Silent Way")
?

The small syntax is seen as more important.

=== The @ symbol mark
The ''@' syntax is unusual. All languages must resolve the issue that when a ''symbol' is defined, the arrgument given is not the symbol, it is text that will be used to create the symbol. The ''@' solution is an unambiguaous, easily parsed, way of doing this (as opposed the the more general methods of most LISPs, such as unquoting).

I agree this is not the most readable solution, but it removes a swathe of complexity from the parsing.





== Types
In most computer languages, the idea of type exists so compiler/interpreters can report type changes to the user. these type changes are assumed to be unintentional, so are usually reported as errors. Ok, Users of OCaml and Haskel may have a different notion, and users of Ruby especially (also Python) will be used to ''duck-typing' where the idea of type is avoided (however, it should be noted that types still exist in these languages, they are mostly hidden though, in fairness, they are only assessed as they arrive).

Rubble does not use types for this purpose. Rubble uses type to DRY the core function set. Machine code is awaash with opcode and variants even for a simple move. Even assembly langauges struggle to fully embrace the possibilities. Rubble does not aim to fully embrace the possibilities of machine or assembly code, and reduced syntax is an aim of Rubble.

=== No additions to the typeset
Most high-level languages have the option to extend the typeset by declaring a ''class'. Rubble does not implement classes, and anyway, prefers to keep the typeset reduced and close to assembly language usage. Since that's how the idea arose, that's how it stays.



== Data structures
Rubbles base data structures represent assembly code idioms.

Rubble includes container data types, because they are used so frequently, and some machine code has been developed to apply to them (e.g. string handling operations). the reasons for container data types are also influenced by the arguments for types, that they allow Rubble to reduce syntax.

Rubble's container data types are few. They are a non consistent sequence, called a ''Clutch', which is somewhat like ''tuples' or ''structs' in higher-level languages. And a consistent data sequence, called an ''Array', which is very like an array in mid-level languages (but nothing like the ''lists' in Pytohn, or a Ruby ''array'). And that's all, because other data types such as linked lists can be built from these. the decision on the teo types is somewhat similar to ''records' and ''lists' in EMACS LISP, which serve something like the same purpose, though there was no influence.









== Variables
Rubble has a notion of variables. This came about from a natural joining of data locations to types. The variables do not have the abstraction level of most computing languages, and are fatr short of a mathematical notation. However, Rubble is only concerned with the the fact that wariables, tracking location and carrying type, have enough abstraction to disguise cross-platform differences. This is an aim of Rubble.


=== Not many definitions, and by policy
Definitions are the usual aim of high-level languages, because they mimic the full abstraction of mathematics. Rubble follows lower-level methods, so frequently breaks from definitions into  allocation/set functions. 

The use of definition or allocation/set functions follows a policy. If data is read-only, then it has no reasonable allocation/set policy (you can't ''set' readonly data!), so Rubble provides definitons. It also provides definitions if underlying machine-code or assembly is capable of  expressing a definition. You don't allocate a register (though you may stash it's contents, or ''clear' it). In these cases Rubble provides definition functions. In all other cases, it provides allocation/set functions. 

=== Why allocation/set
Even when they allocate, many mid-level languages, and upwards, attempt to maintin the clarity of definitions. However, most assembly code works like an allocate/set paiing. It is an aim of Rubble to reflect such work.

=== Aggregates
Most languages use classes and what are called constructor functions to fil larger structures with data. Rubble has no interest in either.
 
There is a language called Ada that has a different approach. It uses what is in parsing a micro-language to fill large structures. These are called Aggregates (''aggregated data'). Rubble is concerned with with representing underlying realities, so it uses set functions where emany languages would use definitions or constructor functions. However, Rubble is not concerned with torturing coders. So it also provides an aggregate language for filling larger structures. The Rubble aggregate language is nowhere near as powerful as the Ada solution, but will be adequate for the needs of Rubble users.



