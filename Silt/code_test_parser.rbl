## A parser
#

#ROStringDefine(@ro1 ""In a Silent Way")
#RODefine(@ro2 79 Bit32)
ROStringDefine(@roTrue ""  True")
ROStringDefine(@roQuery ""Query:")

func(@adder)
    frame()
    raw('mov rbx, 99')
    #mkLocationRoot(locRBX, 'rbx')
    #setReturn(locRBX)
    frameEnd()
    funcEnd()

func(@looper)
    frame()
    stackAllocBytes(@loalVars 0 2)
    #regDefine(counter, 'rcx' 9)
    #while(GT(counter 0))
        #dec(counter)
    #    whileEnd()
    frameEnd()
    funcEnd()

funcMain()
    #comment('gettin funky')
    frame()
    # Not working due to path sacanning...
    #registersPush('rbx', 'r2')
    #registersVolatilePush()
    #registersPop()

#--
    #println(ro1)
#--
    #println(ro2)
#--

#-- define
    #regDefine(@reg1 'rbx' 777 Bit64)
    #println(reg1)
#--
    #Isnt working because what ''type' is a length of bytes?
    #heapAllocBytes(@heap1 8)

#-- heapAlloc
    #heapAlloc(@heap2 Bit64)
    #set(heap2 799)
    #println(heap2)

#--
    #Isnt working because what ''type' is a length of bytes?
    #stackAllocBytes(@stk1 8, 1)
    #set(stk1 799)
    #println(stk1)
#--
    #stackAlloc(@stk2 2 Bit64)
    #set(stk2 979)
    #println(stk2)
#--
    #stackAlloc(@stk2 1 Bit64)
#--
    #stackAlloc(@stk2 Array(Bit64, 8))
    #varStack(@stk2 2 99)
    #println(Bit64 stk2)
    #println(stk2)
    #stringHeapAlloc(24)

#-- reg push
    #registersVolatilePush('rax' 'rbx' 'rcx')
    #registersVolatilePop()

#-- arithmetic
#-- dec/inc
    heapAlloc(@dec1 Bit64)
    set(dec1 777)

    #regDefine(@dec1 'rbx' 77 Bit64)
    #inc(dec1)
    dec(dec1)
    println(dec1)


#-- cmp
    #regDefine(@rbx1 'rbx' 77 Bit64)
    #regDefine(@rcx2 'rcx' 3 Bit64)
    #cmp(rbx1 lt(rcx2 5) )
    #println(rbx1)

#-- if
    #println(roQuery)
    #ifStart(and(gt('rbx' 777) lte('rbx' 777)))
    #    println(roTrue)
    #    ifEnd()

#-- loops
#-- forRange
    #regDefine(@reg1 'rbx' 2 Bit64)
    #println(roQuery)
    #forRange('rbx' 0 -2)
    #    println(roTrue)
    #    forRangeEnd()

#-- forEach
    #heapAlloc(@heap3 Array(Bit64 3))
    #setPath(heap3 [0] 555)
    #setPath(heap3 [2] 999)
    #forEach(@elem 'r12' heap3)
        #registersPush(('rax' 'r12' 'rbx' 'rcx'))
        #registersVolatilePush()
        #println(elem)
        #registersPop()
        #forEachEnd()

#-- forEachUnrolled
    #heapAlloc(@heap3 Clutch(Bit64 Bit8 Bit64))
    #raw('mov qword[rax], 999')
    #raw('mov qword[rax + 8], 5')
    #raw('mov qword[rax + 9], 777')
    #setPath(heap3 [7] 3)
    #setPath(heap3 [9] 999)
    #forEachUnrolled(@elem 'r12' heap3)
        #raw('; ...Unrolled contents...')
    #    raw('; ...Unrolled cont...')
    #    registersPush(('rax' 'r12'))
    #    println(elem)
    #    registersPop()
    #    forEachUnrolledEnd()
#--
    # general exit
    printFlush()
    frameEnd()
    sysExit(0)
    funcMainEnd() 


#While(OR([LT('rax', 5), LT('b', 7), LT('c', 9)  ]))

#+56737.5
#""hey ho" 
#"""
#multi
#line 
#string
#"
# 

