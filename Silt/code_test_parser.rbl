## A parser
#

ROStringDefine(@ro1 ""In a Silent Way")
RODefine(@ro2 797 Bit64)
ROStringDefine(@roTrue ""  True")
ROStringDefine(@roQuery ""Query:")
ROStringUTF8Define(@utf1 ""C\u2042fÃ©")
#ROStringUTF8Define(@utfHappyFace ""\u263a")

func(@adder)
    frame()
    raw('mov rbx, 99')
    #mkLocationRoot(locRBX, 'rbx')
    #setReturn(locRBX)
    frameEnd()
    funcEnd()

func(@looper)
    frame()
    stackAllocSlots(2)
    #regNamedDefine(counter, 'rcx' 9)
    #while(GT(counter 0))
        #dec(counter)
    #    whileEnd()
    frameEnd()
    funcEnd()

funcMain()
    #comment('gettin funky')
    frame()

#- reg stack
    # Not working due to path sacanning...
    #registersPush('rbx', 'r2')
    #registersVolatilePush()
    #registersPop()
    #registersVolatilePush('rax' 'rbx' 'rcx')
    #registersVolatilePop()


#- Alloc/define
#-- RO Global
#-- ROStr
    #println(ro1)

#-- ROData
    #println(ro2)

#-- ROUTF
    # println(utf1)

#-- Reg
#-- Reg Named
    #regNamedDefine(@reg1 'rbx' 777 Bit64)
    #println(reg1)
    #regNamedDefine(@reg2 'rbx' 333 Bit64)
    #println(reg2)

#-- regDefine
    #regDefine(@var1 333 Bit64)
    #println(var1)

#--heap
#-- heapAlloc
    #heapAlloc(@heap1 Array(Bit8 3))

#-- heapSet1
    #heapAlloc(@var1 Bit64)
    #heapSet(var1 333)
    #println(var1)

#-- heapSet2
    #heapAlloc(@var1 Array(Clutch(Bit8 Bit64) 3))
    #heapSet(var1 [* [33 77]])
    #println(var1)

#-- heapSet3
    #heapAlloc(@var1 Bit64)
    # parses, but fails
    #heapSet(var1 [jepp ~> 888])
    #println(var1)

#-- heapStringDefine
    # No. What we will do here is define our string handling library
    #heapStringDefine(@str1 'groovin on a sunny afternoon')
    #heapStringDefine(@str1 'a long str')
    #println(str1)

#-- heapDefineStringUtf8
    # No. What we will do here is define our string handling library
    # heapDefineStringUtf8(@utf1 'groovin')
    # println(arith1)

#-- heapBytesAlloc
    #! cant print
    #heapBytesAlloc(@var1 3)
    #heapSet(var1 [* 5])
    #println(var1)


#-- Stack
#-- stackAllocSlots
    #stackAllocSlots(16)
    # Throws warning
    #stackAllocSlots(9)


#--stackAlloc
    #stackAlloc(@var1 Bit64)

#--stackAlloc2
    #stackAlloc(@var1 Array(Clutch(Bit8 Bit64) 3))

#-- stackSet1
    #stackAlloc(@var1 Bit64)
    #stackSet(var1 333)
    #println(var1)

#-- stackSet2 (triggers align)
    #stackAlloc(@var1 Bit8)
    #stackSet(var1 333)
    #println(var1)

#-- stackSet3
    #stackAlloc(@var1 Array(Clutch(Bit8 Bit64) 3))
    #stackSet(var1 [* [33 77]])
    #println(var1)

#-- stackDefine
    #stackAllocSlots(16)
    #stackDefine(@stk1 555 Bit64)
    #stackDefine(@stk2 777 Bit64)
    #println(stk1)
    #println(stk2)

#-- stackStringDefine
    # No. What we will do here is define our string handling library
    stackStringDefine(@var1 'groovin on a sunny afternoon')
    stackStringDefine(@var2 'a long str')
    println(var1)
    println(var2)

#-- stackBytesAlloc
    #! cant print
    #stackBytesAlloc(@var1 3)
    #stackSet(var1 [* 5])
    #println(var1)





#-- set (on reg)
    #define(@var1 333 Bit64)
    #set(var1 555)
    #println(var1)

#-- set (on heap)
    #heapAlloc(@heap2 Bit64)
    #set(heap2 799)
    #println(heap2)

#-- set (from var)
    # define(@var1 333 Bit64)
    # define(@var2 555 Bit64)
    # set(var1 var2)
    # println(var1)

#-- setPriority
    # define(@var1 333 Bit64)
    # setPriority(var1, 3)
    # println(var1)

#-- delete
    #define(@var2 333 Bit64)
    #delete(var2)
    #println(var2)



#-- arithmetic
#-- dec/inc
    #heapAlloc(@dec1 Bit64)
    #set(dec1 777)
    #inc(dec1)
    #dec(dec1)
    #println(dec1)

#-- add
    #define(@var1 333 Bit64)
    #add(var1 555)
    #println(var1)

#-- add
    #define(@var1 333 Bit64)
    #define(@var2 555 Bit64)
    #add(var1 var2)
    #println(var1)

#-- add (from heap)
    #heapAlloc(@var1 Bit64)
    #set(var1 333)
    #add(var1 555)
    #println(var1)

#-- add (from stack)
    #stackAllocSlots(16)
    #stackDefine(@var1 333 Bit64)
    #add(var1 555)
    #println(var1)

#-- add (from var)
    # define(@var1 333 Bit64)
    # define(@var2 555 Bit64)
    # add(var1 var2)
    # println(var1)

#-- sub
    #define(@var1 333 Bit64)
    #sub(var1 555)
    #println(var1)

#-- sub (from heap)
    #heapAlloc(@var1 Bit64)
    #set(var1 333)
    #sub(var1 555)
    #println(var1)

#-- sub (from var)
    #define(@var1 333 Bit64)
    #define(@var2 555 Bit64)
    #sub(var1 var2)
    #println(var1)

#-- mul/div
    # must be a reg
    #regNamedDefine(@arith1 'rbx' 3 Bit64)
    #mul(arith1 7)
    #println(arith1)

# -- shl/shr
    # must be a reg
    # regNamedDefine(@arith1 'rbx' 128 Bit64)
    #shr(arith1 1)
    # shl(arith1 1)
    # println(arith1)



#-- ifRange
    #regNamedDefine(@rbx1 'rbx' 3 Bit64)
    #println(roQuery)
    #ifRangeStart(rbx1 3 9)
    #    println(roTrue)    
    #    ifRangeEnd()

#-- if
    #define(@var1 555 Bit64)
    #println(roQuery)
    #ifStart(and(gt(var1 333) lte(var1 777)))
    #    println(roTrue)
    #    ifEnd()

#-- cmp
    #regNamedDefine(@rbx1 'rbx' 77 Bit64)
    #regNamedDefine(@rcx2 'rcx' 3 Bit64)
    #cmp(rbx1 lt(rcx2 5) )
    #println(rbx1)

#-- cmp2
    #stackAllocSlots(2)
    #heapAllocSlots(4)
    #set(heap2 799)


#-- switch
    #regNamedDefine(@rbx1 'rbx' 8 Bit64)
    #switchStart(rbx1)
    #    whenStart(7)
    #        println(roTrue)
    #        whenEnd()
    #    whenStart(2)
    #        println(roTrue)
    #        whenEnd()
    #    whenDefaultStart()
    #        println(roTrue)
    #        whenEnd()
    #    switchEnd()

#-- loops
#-- forRange
    #regNamedDefine(@reg1 'rbx' 2 Bit64)
    #println(roQuery)
    #forRange('rbx' 0 -2)
    #    println(roTrue)
    #    forRangeEnd()

#-- forEach
    #heapAlloc(@heap3 Array(Bit64 3))
    #setPath(heap3 [0] 555)
    #setPath(heap3 [2] 999)
    #forEach(@elem 'r12' heap3)
        #registersPush(('rax' 'r12' 'rbx' 'rcx'))
        #registersVolatilePush()
        #println(elem)
        #registersPop()
        #forEachEnd()

#-- forEachUnrolled
    #heapAlloc(@heap3 Clutch(Bit64 Bit8 Bit64))
    #raw('mov qword[rax], 999')
    #raw('mov qword[rax + 8], 5')
    #raw('mov qword[rax + 9], 777')
    #setPath(heap3 [7] 3)
    #setPath(heap3 [9] 999)
    #forEachUnrolled(@elem 'r12' heap3)
        #raw('; ...Unrolled contents...')
    #    raw('; ...Unrolled cont...')
    #    registersPush(('rax' 'r12'))
    #    println(elem)
    #    registersPop()
    #    forEachUnrolledEnd()


#-- Print string
    #println(""So Tired of Being Alone")

#--
    # general exit
    printFlush()
    frameEnd()
    sysExit(0)
    funcMainEnd() 


#While(OR([LT('rax', 5), LT('b', 7), LT('c', 9)  ]))

#+56737.5
#""hey ho" 
#"""
#multi
#line 
#string
#"
# 

