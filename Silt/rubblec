#!/usr/bin/env python3

import sys
from gio.reporters.ReporterStreamConsole import ReporterStreamConsole
from Compiler import Compiler
from BuilderAPI import BuilderAPIX64
from Lexer import Lexer
from gio.reporters.Sources import FileSource
from gio.iterators.TrackingIterator import FileIteratorTracking
from tpl_style import *
import nasmFrames
from gio.exceptions import GIOLexicalError, GIOSynatxError
# SyntaxError



# ./rubblec code_test_parser.rbl
def main():
    args = sys.argv
    if (len(args) < 2):
        print('need filepath!')
        exit(1)
    filePath = args[1]

    # make compiler and set reporter    
    reporter = ReporterStreamConsole(1, 1)
    compiler = Compiler(reporter, BuilderAPIX64())

    # make token iterator/lexer
    lxr = Lexer(FileSource(filePath), FileIteratorTracking(filePath), reporter)
    
    # parse input and get builder
    try:
        compiler.parse(lxr)
    except (GIOLexicalError, GIOSynatxError):
        print('not done')
        sys.exit(1)
    #compiler.parse(lxr)
    finishedBuilder = compiler.result()
    # print(str(finishedBuilder._code))

    # style
    o = builderPrint(nasmFrames.frame64, finishedBuilder, baseStyle)
    #print(o)

    # output
    with open('build/out.asm', 'w') as f:
        f.write(o)            
        
        
        
if __name__ == "__main__":
    main()
