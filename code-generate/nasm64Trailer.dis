     1                                  ; Simple frame for NASM testing.
     2                                  ; Trial compile easily using the script trailer.
     3                                  ; The runners fully link.
     4                                  BITS 64
     5                                  DEFAULT REL
     6                                  
     7                                  
     8                                  ;SECTION .data
     9                                      ;dispMsg db 'You have entered: '
    10                                      ;lenDispMsg equ $-dispMsg 
    11                                  
    12                                  
    13                                  ;SECTION .text          ;Code Segment
    14                                     
    15                                  ;main:
    16                                  
    17                                      ;;Output the message 'The entered number is: '
    18                                      ;mov eax, 4
    19                                      ;mov ebx, 1
    20                                      ;mov ecx, dispMsg
    21                                      ;mov edx, lenDispMsg
    22                                      ;int 80h  
    23                                  
    24                                  
    25                                      
    26                                      ;ret
    27                                  
    28                                  ;section	.data
    29                                      ;userPrompt db 'Please enter a number: ' ;Ask the user to enter a number
    30                                      ;lenUserPrompt equ $-userPrompt    ;length of the message
    31                                      ;msg db 'Hello, world!', 0xa ;string to be printed
    32                                      ;len equ $ - msg             ;length of the string
    33                                  
    34                                  ;! need rodata in ELF
    35                                  section	.rodata
    36 00000000 2D                          asciiMinus db 45
    37                                      ;asciiPlus db 43
    38                                      ;asciiLF db 10
    39                                      ; ASCII 0, 1, 2.... 
    40                                      ;asciiNumerics db 48, 49, 50, 51, 52, 53, 54, 55, 56, 57
    41                                      ;! Also hex...
    42                                      ; 0123456789ABCDEF
    43                                      
    44                                  ;section .bss           ;Uninitialized data
    45                                  ;    num resb 9
    46                                          
    47                                  ;section	.text
    48                                  
    49                                  global main	
    50                                  main:
    51                                      ;prompt
    52                                      ;mov	rax, 1      ;system call number (sys_write)
    53                                      ;mov	rdi, 1      ;file descriptor (stdout)
    54                                      ;mov	rsi, userPrompt     ;message to write
    55                                      ;mov	rdx, lenUserPrompt  ;message length
    56                                      ;syscall
    57                                      
    58                                      ;;Read and store the user input
    59                                      ;mov rax, 0      ;system call number (sys_read)
    60                                      ;mov rdi, 2      ;file descriptor
    61                                      ;mov rsi, num  
    62                                      ;mov rdx, 9      ;5 bytes (numeric, 1 for sign) of that information
    63                                      ;syscall
    64                                     
    65                                      ;;mov qword[num], 62
    66                                     
    67                                      ;;Output the number entered
    68                                      ; ! use stack and reverse, or use some memory?
    69                                      ; jump if not negative
    70                                      ;cmp 0, rax
    71                                      ;jge loop
    72                                      ; for the printout, negate rax
    73                                      ;neg rax
    74                                      ; Print "-"
    75                                      ;push rax
    76                                      ;mov rax, 1      ;system call number (sys_write)
    77                                      ;mov	rdi, 1      ;file descriptor (stdout)
    78                                      ;mov rsi, asciiMinus   ;print '-'
    79                                      ;mov rdx, 1     ;5 bytes (numeric, 1 for sign)
    80                                      ;syscall
    81                                      ;pop rax
    82                                  
    83                                      ;push rax
    84                                      ;push 62
    85                                      ;mov rax, 1      ;system call number (sys_write)
    86                                      ;mov	rdi, 1      ;file descriptor (stdout)
    87                                      ;mov rsi, asciiNumerics + 4   ;address of thing to print
    88                                      ;mov rdx, 1     ;5 bytes (numeric, 1 for sign)
    89                                      ;syscall
    90                                      ;pop rax
    91                                      ;pop rax
    92                                      
    93                                      ;;Output the message
    94                                      ;mov	rax, 1      ;system call number (sys_write)
    95                                      ;mov	rdi, 1      ;file descriptor (stdout)
    96                                      ;mov	rsi, msg    ;message to write
    97                                      ;mov	rdx, len    ;message length
    98                                      ;syscall
    99                                      
   100                                      ; simple exit
   101 00000001 B83C000000                  mov	rax, qword 60     ;system call number (sys_exit)
   102 00000006 BF2A000000                  mov	rdi, qword 42     ;system call number return
   103 0000000B 0F05                        syscall
   104                                  
   105                                  
