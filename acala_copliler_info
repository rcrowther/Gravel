== Scala DSLs
https://stackoverflow.com/questions/49216312/what-is-dsl-in-scala

https://channel9.msdn.com/Events/GoingNative/GoingNative-2012/Keynote-Bjarne-Stroustrup-Cpp11-Style

https://ocaml.org/learn/tutorials/performance_and_profiling.html

=== Scala compiler
From 2.10.7

Look in,

/home/rob/Downloads/scala-2.10.7/src/compiler/scala/tools

/home/rob/Downloads/scala-2.10.7/src/reflect/scala/reflect

Some of the terminology in the Scala compiler appears to be derived from Lambda Calculus. In particular, using terminology more familiar to computer coders,

~~ Terms 
:: See Lambda calculus. Basicly, there are three valid terms in Lambda calculus; a parameter name or constant that returns a result, function definitions with one parameter, function calls with one parameter.
~~ Apply
:: Scala uses this for a method that can be called on a class instance with no statement of the method i.e. on an Array def apply(idx) is called as a(4). In Lambda calculus, no function call has a ''name', everything is ''inlined'. The ''functionCall' rule is called ''Application'
~~ FreshNames
:: A rather odd name maybe from Lambdas capture-avoiding substitutions. Basicly, this is how to lump large terms into function parameters, which is good for human readability, but will need to be split in auto-generated variable names. Fresh terms/names means inventing variable names that will not be repeated in the body of a function. This may seem obvious to a coder, but in mathematics needs to be formally stated.
~~ '':' prefix for types
:: often notated in Lambda calculus as '':' also.
~~ Constants
:: There are extensions to Lambda calculus that define common functions (for shortcut readability). These constants may include ''primitive' numbers, true/false/not/and/if...then..,  and simple operations such as plus/minus/times/divide/equal/error. While this makes Lambda calculus look more like many computer languages, the point here is it may have influenced Scala's naming schemes in the compiler. The word ''constants' may not mean ''unalterable/immutable data' but ''primitive  (small, often repeated) functions'.

Expanding on one note, the explicit passing back of errors is part of Lambda calculus, made it's way into Haskell and is part of Scala too, available via the class Option etc. .




