
==
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
r = ConsoleStreamReporter()
r.error('ouch')
r.warning('ouch')
r.info('ouch')

== Syntaxer
from gio.Source import FileSource
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from Syntaxer import Syntaxer
src = FileSource('test/syntax.gv')
r = ConsoleStreamReporter()
s = Syntaxer(src, r)

== Tree printing
from trees.Visitors import RawPrint
RawPrint(s.ast)

== Phases
from Phases import *
p1 = Phase('lex', 'run the lexer over input', True)
p2 = Phase('syntax', 'check synatx, build tree', True)
p3 = Phase('unarySignCompact', 'Replace parsed unary signs with internal +/-', True)
pl = PhaseList(p1,p2,p3)
pl.indexOf('unarySignCompact')
pl1 = pl.take('syntax')
for p in pl1:
   print(p.name)
pl.toDisplayString()
for p in pl:
    print(p.toDisplayString())

== CompilationUnit
from gio.Source import FileSource
from CompilationUnit import CompilationUnit
src = FileSource('test/syntax.gv')
cu = CompilationUnit(src)

== Pipelines

== PrebuiltPipelines
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from PrebuiltPipelines import Stock
from gio.Source import FileSource
from CompilationUnit import CompilationUnit
r = ConsoleStreamReporter()
p = Stock()
cu = CompilationUnit(FileSource('test/syntax.gv'))
p.run(cu, r)


from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from PrebuiltPipelines import PrintTokens
from gio.Source import FileSource
from CompilationUnit import CompilationUnit
r = ConsoleStreamReporter()
p = PrintTokens()
cu = CompilationUnit(FileSource('test/syntax.gv'))
p.run(cu, r)



from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from PrebuiltPipelines import PrintTree
from gio.Source import FileSource
from CompilationUnit import CompilationUnit
r = ConsoleStreamReporter()
p = PrintTree()
cu = CompilationUnit(FileSource('test/syntax.gv'))
p.run(cu, r)
