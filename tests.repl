

== Phases
from Phases import *
p1 = Phase('lex', 'run the lexer over input', True)
p2 = Phase('syntax', 'check synatx, build tree', True)
p3 = Phase('unarySignCompact', 'Replace parsed unary signs with internal +/-', True)
pl = PhaseList(p1,p2,p3)
pl.indexOf('unarySignCompact')
pl1 = pl.take('syntax')
for p in pl1:
   print(p.name)
pl.toDisplayString()
for p in pl:
    print(p.toDisplayString())

== CompilationUnit
from gio.Sources import FileSource
from CompilationUnit import CompilationUnit
src = FileSource('test/syntax.gv')
cu = CompilationUnit(src)

== Pipelines

== PrebuiltPipelines

from PrebuiltPipelines import PrintTokens
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from gio.Sources import FileSource
from CompilationUnit import CompilationUnit
r = ConsoleStreamReporter()
p = PrintTokens()
cu = CompilationUnit(FileSource('test/syntax.gv'))
p.run(cu, r)



from PrebuiltPipelines import PrintTree
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from gio.Sources import FileSource
from CompilationUnit import CompilationUnit
r = ConsoleStreamReporter()
p = PrintTree()
cu = CompilationUnit(FileSource('test/syntax.gv'))
p.run(cu, r)

# Stock
from PrebuiltPipelines import Stock
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from gio.Sources import FileSource
from CompilationUnit import CompilationUnit
r = ConsoleStreamReporter()
p = Stock()
cu = CompilationUnit(FileSource('test/syntax.gv'))
p.run(cu, r)

# (see also 'gaveldoc' utility)
from PrebuiltPipelines import Documentation
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from gio.Sources import FileSource
from CompilationUnit import CompilationUnit
r = ConsoleStreamReporter()
p = Documentation()
cu = CompilationUnit(FileSource('test/syntax.gv'))
p.run(cu, r)
