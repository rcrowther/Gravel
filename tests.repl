python3

== Tokens
from Tokens import *
tokenToString
punctuationCodepoints

for k, v in punctuationCodepointToToken.items():
  print(k, tokenToString[v])

WHILE
INT_NUM

tokenToString[LSQUARE]

== Mark
from Mark import *
m = Mark('class')
m.toString()
NoMark.toString()

== MarkTable
from MarkTable import *
t = ExpressionMarkTable()
t.note('xbox')
# return the Mark
print(t.define('xbox'))
# return None
print(t.define('xbox'))
print(t.note('xbox1'))
t('xbox')
t.toString()



== Kinds
from Kinds import *
NoKind.toString()


== Trees
from trees.Trees import *
MarkNode(33)
MarkNode(Mark('xbox'))
NoMarkNode
IntegerAtom(44)
FloatAtom(78.6)
StringAtom('doopy')
ExpressionWithBodyBase(Mark('dpong'))
ParameterContext(Mark('dpong'))
Lambda()

==
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
r = ConsoleStreamReporter()
r.error('ouch')
r.warning('ouch')
r.info('ouch')

== Syntaxer
from gio.Source import FileSource
from reporters.ConsoleStreamReporter import ConsoleStreamReporter
from Syntaxer2 import Syntaxer
src = FileSource('/home/rob/Code/python/gravel/test/syntax.gv')
r = ConsoleStreamReporter()
s = Syntaxer(src, r)

== Tree handling
from trees.Visitors import RawPrint
RawPrint(s.ast)

== Phases
from Phases import *
p1 = Phase('lex', 'run the lexer over input', True)
p2 = Phase('syntax', 'check synatx, build tree', True)
p3 = Phase('unarySignCompact', 'Replace parsed unary signs with internal +/-', True)
pl = PhaseList(p1,p2,p3)
pl.indexOf('unarySignCompact')
pl1 = pl.take('syntax')
for p in pl1:
   print(p.name)
pl.toDisplayString()
for p in pl:
    print(p.toDisplayString())
